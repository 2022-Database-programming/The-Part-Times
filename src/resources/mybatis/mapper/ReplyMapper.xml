<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mybatis.mapper.ReplyMapper">
	<cache />
	
	<insert id="insertFirstReply" parameterType="ReplyDto">
		<selectKey keyProperty="id" resultType="int" order="BEFORE">
			SELECT comment_seq.nextval AS id FROM DUAL
		</selectKey>
				
		INSERT INTO reply (id, post_id, reply_id, is_anonymous, content, likes, layer, created_at, updated_at, member_id) 
		VALUES (#{id}, #{postId}, NULL, #{isAnonymous}, #{content}, #{likes}, #{layer}, DEFAULT, DEFAULT, #{memberId})
	</insert>

	<insert id="insertReply" parameterType="ReplyDto">
		<selectKey keyProperty="id" resultType="int" order="BEFORE">
			SELECT comment_seq.nextval AS id FROM DUAL
		</selectKey>
				
		INSERT INTO reply (id, post_id, reply_id, is_anonymous, content, likes, layer, created_at, updated_at, member_id) 
		VALUES (#{id}, #{postId}, #{replyId}, #{isAnonymous}, #{content}, #{likes}, #{layer}, DEFAULT, DEFAULT, #{memberId})
	</insert>

	<update id="updateReply">
		UPDATE reply 
		SET content = #{replayDto.content}, updated_at = SYSDATE
		WHERE id = #{findReplyId}
	</update>
 
	<update id="updateLikesReply">
		UPDATE reply
		SET content = #{replayDto.content}, likes = #{replayDto.likes}, updated_at = SYSDATE
		WHERE id = #{findReplyId}
	</update>
	
	<delete id="deleteReply" parameterType="int">
		DELETE FROM reply
		WHERE id = #{id}
	</delete>

	<select id="selectReply" parameterType="int" resultType="ReplyDto"> 
		SELECT r.id AS id, post_id AS postId, reply_id AS replyId, is_anonymous AS isAnonymous, content, likes, layer, r.created_at AS createdAt, r.updated_at AS updatedAt, r.member_id AS memberId, m.name AS name
		FROM reply r LEFT OUTER JOIN member m ON p.member_id = m.id
		WHERE r.id = #{id}	
    </select>      
		
	<resultMap id="replyResultMap" type="ReplyDto">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="post_id" jdbcType="INTEGER" property="postId" />
		<result column="reply_id" jdbcType="INTEGER" property="replyId" />
		<result column="is_anonymous" jdbcType="INTEGER" property="isAnonymous" />
		<result column="content" jdbcType="VARCHAR" property="content" />
		<result column="likes" jdbcType="INTEGER" property="likes" />
		<result column="layer" jdbcType="INTEGER" property="layer" />
		<result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
		<result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
		<association column="member_id" property="member" javaType="MemberDto">
			<id column="id" jdbcType="INTEGER" property="memberId" />
			<result column="name" jdbcType="VARCHAR" property="name" />
		</association>
	</resultMap>
 
	<select id="selectAllReply" parameterType="int" resultMap="replyResultMap"> 
		SELECT r.id, post_id, reply_id, is_anonymous, content, likes, layer, r.created_at, r.updated_at, r.member_id, m.name AS name
        FROM reply r LEFT OUTER JOIN member m ON p.member_id = m.id  			
		WHERE r.id = #{id} 
	</select>
	
	<select id="countReply" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM reply WHERE post_id = #{postId}
    </select>
</mapper>